apply plugin: "com.github.spotbugs"

task outputSpotbugsReports(description: "Display Spotbugs output") {
    doFirst {
        def main = spotbugsMain.reports.findByName("XML").destination
        printSpotbugsReportToConsole(main)
        def test = spotbugsTest.reports.findByName("XML").destination
        printSpotbugsReportToConsole(test)
    }
}

def printSpotbugsReportToConsole(File file) {
    logger.info "Reviewing file $file"
    if (file.exists() && file.length() > 0) {
        logger.info "Processing found file $file"
        def slurper = new XmlSlurper().parse(file)
        def bugsFound = slurper.BugInstance.size()
        if (bugsFound > 0) {
            ansi.red "*********************************\nFound Spotbugs rule violation(s):\n"
            slurper.BugInstance.each { bug ->
                ansi.red "*********************************"
                ansi.red "Bug (" + bug.@abbrev + "): " + bug.@type + " [" + bug.@priority + "-" + bug.@rank + "] @ category " + bug.@category
                bug.Class.each { clz ->
                    ansi.red "\tClass: " + clz.@classname
                    clz.SourceLine.each { line ->
                        ansi.red "\tStart Line: " + line.@start + ", End Line: " + line.@end + ", Source Path: [" + line.@sourcepath + "], Source File: [" + line.@sourcefile + "]"
                    }
                }
                ansi.red "\t----------------------METHOD-----------------------------"
                bug.Method.each { md ->
                    ansi.red "\tMethod: " + md.@name + " [static: " + md.@isStatic + "]"
                    ansi.red "\tSignature: " + md.@signature
                    md.SourceLine.each { line ->
                        ansi.red "\tStart Line: " + line.@start + ", End Line: " + line.@end
                    }
                }
                ansi.red "\t-------------------SOURCE LINE---------------------------"
                bug.SourceLine.each { line ->
                    ansi.red "\tStart Line: " + line.@start + ", End Line: " + line.@end + ", Class: [" + line.@classname + "]"
                }
            }
            def msg = "\n$bugsFound Spotbugs rule violation(s) were found. See the report at: $file"
            ansi.red msg
            if (!providers.systemProperty("ignoreFindbugsFailures").forUseAtConfigurationTime().present) {
                throw new GradleException(msg)
            }
        } else {
            logger.debug "$file contains no bug instances"
        }
    } else {
        logger.info "$file does not exist"
    }
}

spotbugs {
    toolVersion = "${spotbugsVersion}"
    showProgress = true
    ignoreFailures = false
    reportsDir = file("$project.buildDir/spotbugs")
    effort = "max"
    reportLevel = "low"
    includeFilter = file("$rootProject.projectDir/style/spotbugs-includes.xml")
    excludeFilter = file("$rootProject.projectDir/style/spotbugs-excludes.xml")
    maxHeapSize = "3g"
}

[spotbugsMain, spotbugsTest].each {
    it.reports {
        xml.enabled = true
    }
    it.finalizedBy outputSpotbugsReports
}
