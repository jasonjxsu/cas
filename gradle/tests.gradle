enum TestCategories {
    ActuatorEndpoint,
    AmazonWebServices,
    Attributes,
    Audits,
    Authentication,
    AuthenticationHandler,
    AuthenticationPolicy,
    AuthenticationMetadata,
    AuthenticationThrottling,
    CAS,
    CasConfiguration,
    Cassandra,
    Cookie,
    CosmosDb,
    Couchbase,
    CouchDb,
    Delegation,
    DynamoDb,
    Ehcache,
    ExpirationPolicy,
    Events,
    FileSystem,
    Groovy,
    Hazelcast,
    Ignite,
    Impersonation,
    Infinispan,
    InfluxDb,
    JDBC,
    JDBCAuthentication,
    JMS,
    JMX,
    Kafka,
    Ldap,
    Logout,
    Mail,
    MariaDb,
    Memcached,
    Metrics,
    MFA,
    MFAProvider,
    MFATrigger,
    MFATrustedDevices,
    MongoDb,
    MsSqlServer,
    MySQL,
    OAuth,
    OIDC,
    Oracle,
    PasswordOps,
    Postgres,
    Radius,
    Redis,
    RegisteredService,
    RestfulApi,
    RestfulApiAuthentication,
    SAML,
    SAMLMetadata,
    SAMLServiceProvider,
    SHELL,
    Simple,
    SMS,
    Spnego,
    Tickets,
    UMA,
    Utility,
    Web,
    WebApp,
    Webflow,
    WebflowActions,
    WebflowAuthenticationActions,
    WebflowConfig,
    WebflowMfaConfig,
    WebflowEvents,
    WebflowMfaActions,
    WSFederation,
    X509,
    ZooKeeper
}

if (rootProject.tasks.findByName("testCategories") == null) {
    rootProject.tasks.create(name: "testCategories", description: "Display all available test categories") {
        doLast {
            def categoryMatchPattern = System.getenv().get("CATEGORY_REGEX") ?: ".*"
            def result = TestCategories.values()
                    .findAll { it.name().matches(categoryMatchPattern) }
                    .toSorted({ o1, o2 ->
                        o1.name().compareTo(o2.name())
                    })
                    .collect { it.name().toLowerCase() }
            println(groovy.json.JsonOutput.toJson(result))
        }
    }
}

if (rootProject.tasks.findByName("puppeteerScenarios") == null) {
    rootProject.tasks.create(name: "puppeteerScenarios", description: "Display all available puppeteer scenarios") {
        doLast {
            def scenarios = new TreeSet<String>()
            def scenarioMatchPattern = System.getenv().get("SCENARIO_REGEX") ?: ".*"
            rootProject.file("ci/tests/puppeteer/scenarios").eachDirMatch(~scenarioMatchPattern) {
                scenarios += it.getName()
            }
            println(groovy.json.JsonOutput.toJson(scenarios))
        }
    }
}

TestCategories.values().each({ category ->
    if (hasTestsOfCategory(project, category.name())) {
        def taskName = "test${category.name()}"
        if (tasks.findByName(taskName) == null) {
            // println "Creating task ${taskName} for ${project.name}"
            tasks.create(name: taskName, type: Test, description: "Testing category ${category.name()}") {
                enabled = shouldTest(project, category.name())
                //finalizedBy jacocoTestReport
                useJUnitPlatform {
                    includeTags category.name()
                }
            }
        }
    }
})

test {
    enabled = false
    onlyIf = {
        false
    }
}

tasks.withType(Test) {
    scanForTestClasses = false
    ignoreFailures = providers.systemProperty("ignoreTestFailures").forUseAtConfigurationTime().present
    forkEvery = 2000
    doFirst {
        maxParallelForks = project.ext.properties.get("maxParallelForksForTests", 4)
        if (maxParallelForks != 2) {
            logger.info "Maximum number of parallel forks is set to ${maxParallelForks}"
        }
    }

    def ci = System.getenv().containsKey("CI")
    if (ci) {
        outputs.upToDateWhen { false }
    }
    systemProperty("spring.main.banner-mode", "off")
//    systemProperty("spring.main.lazy-initialization", "true")
    systemProperty("CI", ci)

    failFast = true

    def list = []
    list.add("--add-modules")
    list.add("java.se")
    list.add("--add-exports")
    list.add("java.base/jdk.internal.ref=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/java.lang=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/java.nio=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/sun.nio.ch=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.management/sun.management=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("jdk.management/com.sun.management.internal=ALL-UNNAMED")
    list.add("--add-opens")
    list.add("java.base/sun.security.action=jdk.crypto.ec")
    list.add("-Xms512m")
    list.add("-Xmx4g")
    jvmArgs = list

    classpath = it.classpath + files("${projectDir}/src/main/resources") + files("${projectDir}/src/test/resources")
    testLogging {
        events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
        exceptionFormat = "full"

        def verbose = providers.systemProperty("verbose").forUseAtConfigurationTime().present

        showStandardStreams = verbose
        showExceptions = verbose
        showCauses = verbose

        if (verbose) {
            beforeSuite { desc ->
                if (!desc.parent) {
                    ansi.cyan "Started running test suite [${desc.displayName}] @ ${new java.util.Date()} "
                }
            }

            beforeTest { desc ->
                ansi.cyan "Started running test [${desc.className}:${desc.displayName}] @ ${new java.util.Date()} "
            }
            
            afterTest { desc, result ->
                ansi.green """
Results for test [${desc.className}:${desc.displayName}]: ${result.resultType} @ ${new java.util.Date()} 
(${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)
"""
            }
            afterSuite { desc, result ->
                if (!desc.parent) {
                    ansi.green """
Results for test suite [${desc.displayName}]: ${result.resultType} @ ${new java.util.Date()} 
(${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)
"""
                }
            }
        }
    }
    def skipRetry = providers.systemProperty('skipTestRetry').forUseAtConfigurationTime().present
    if (!skipRetry) {
        retry {
            maxRetries = 3
            maxFailures = 5
            failOnPassedAfterRetry = false
        }
    }
    jacoco {
        dumpOnExit = true
        excludes = rootProject.excludedFilesFromTestCoverage
    }
    filter {
        setFailOnNoMatchingTests(false)
        excludeTestsMatching "*TestsSuite"
    }
}

def shouldTest(Project project, String category) {
    def foundTest = gradle.startParameter.taskNames.any { task -> task.matches(/^test${category}$/) }
    if (!foundTest) {
        logger.debug "No tests with category ${category} found for ${project.name}"
    }
    return !providers.systemProperty("skipTests").forUseAtConfigurationTime().present && foundTest && hasTestsOfCategory(project, category)
}

def hasTestsOfCategory(Project project, String category) {
    def testSrc = project.sourceSets.test.java.srcDirs
    def res = srcTagMap.computeIfAbsent(testSrc) {
        def tags = new HashSet()
        testSrc.each { src ->
            try {
                src.eachFileRecurse { file ->
                    if (file ==~ /.*Tests\.\w+/) {
                        file.readLines().parallelStream().forEach() { line ->
                            def m = line =~ /^\s*@Tag\("(\w+)"\)\s*$/
                            if (m) {
                                tags.addAll(m.collect { it[1] })
                            }
                        }
                    }
                }
            } catch (ignored) {
            }
        }
        tags
    }
    res.contains(category)
}

